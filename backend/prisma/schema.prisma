// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  name         String
  email        String   @unique
  passwordHash String?
  phoneNumber  String?  @unique
  role         Role     @default(USER)
  isVerified   Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  verificationToken String?   @unique
  verificationExp   DateTime?
  resetToken        String?   @unique
  resetTokenExp     DateTime?

  profileImage       String?
  lastLogin          DateTime?
  faceShape          String?
  preferredStyles    String[]
  analyticsId        String?
  lastViewedProducts String[]

  oauthProvider String?
  oauthId       String?

  wishlist      Wishlist[]
  cart          Cart?
  refreshTokens RefreshToken[]

  Address Address[]
}

model Address {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  line1     String
  line2     String?
  city      String
  state     String
  postal    String
  country   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Wishlist {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  productId String
  createdAt DateTime @default(now())

  @@index([userId, productId])
}

model Cart {
  id        String     @id @default(uuid())
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String     @unique
  items     CartItem[]
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String @id @default(uuid())
  cart      Cart   @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    String
  productId String
  quantity  Int    @default(1)
}

model RefreshToken {
  id        String    @id @default(uuid())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  token     String    @unique
  expiresAt DateTime
  revokedAt DateTime?
  createdAt DateTime  @default(now())
}

enum Role {
  USER
  ADMIN
}
